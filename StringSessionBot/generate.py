from asyncio.exceptions import TimeoutError
from Data import Data
from pyrogram import Client, filters
from telethon import TelegramClient
from telethon.sessions import StringSession
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid,
)
from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError,
)


@Client.on_message(filters.private & ~filters.forwarded & filters.command("generate"))
async def main(_, msg):
    await msg.reply(
        "┘Е┘Арвк╪н╪и┘А┘Л╪з ╪и┘А┘Г ╪╣┘А╪▓┘К┘А╪▓┘К ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й ┘В┘А┘Е ╪и┘А╪з╪о╪к┘А┘К┘А╪зрвк ╪з▐м▌к╪м┘А┘Д┘А╪│┘А╪й ╪з▐м▌к┘Е┘А┘Й╪з╪п ╪з╪│┘А╪к┘А╪орвк╪з╪м┘А┘З╪з",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("╪и┘А╪з┘К┘Арвк┘И╪м┘Арвк╪з┘Е", callback_data="pyrogram"),
                    InlineKeyboardButton("╪к┘А┘Д┘А┘К┘А╪л┘И┘Ж", callback_data="telethon"),
                ]
            ]
        ),
    )


async def generate_session(bot, msg, telethon=False):
    await msg.reply(
        "╪к┘А┘Е ╪и╪п╪б  {} ╪з╪│╪к┘А╪о┘Арвк╪з╪м ╪з▐м▌к╪м┘А┘Д╪│╪й...".format(
            "Telethon" if telethon else "Pyrogram"
        )
    )
    user_id = msg.chat.id
    api_id_msg = await bot.ask(
        user_id, "╪грвк╪│┘А┘Д ╪з▐м▌к╪в┘Ж ╪з▐м▌к╪о╪з╪╡ ╪и┘А┘Г `API_ID`", filters=filters.text
    )
    if await cancelled(api_id_msg):
        return
    try:
        api_id = int(api_id_msg.text)
    except ValueError:
        await api_id_msg.reply(
            "╪║┘К┘Арвк ╪╡╪з┘Д┘А╪нAPI_ID(╪г╪╣┘А┘А╪п ╪з▐м▌к┘Е┘А╪н╪з┘И┘Д┘А╪й).  ╪з▐м▌к╪о╪з╪╡ ╪и┘А┘Г ╪║┘К┘Арвк ╪╡╪з┘Д┘А╪н ╪н┘А╪з┘И┘Д ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й.",
            quote=True,
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    api_hash_msg = await bot.ask(
        user_id, "╪грвк╪│┘А┘Д ╪з▐м▌к╪в┘Ж ╪з▐м▌к╪о╪з╪╡ ╪и┘А┘Г `API_HASH`", filters=filters.text
    )
    if await cancelled(api_id_msg):
        return
    api_hash = api_hash_msg.text
    phone_number_msg = await bot.ask(
        user_id,
        "╪з▐м▌к╪в┘Ж ╪грвк╪│┘А┘Д рвк┘В┘Е ╪з▐м▌к┘З╪з╪к┘Б ╪з▐м▌к╪о╪з╪╡ ╪и┘А┘Г`с┤Ш╩Ьс┤П╔┤с┤З_╔┤с┤Ьс┤Н╩Щс┤З╩А` ┘В┘Е ╪и┘А┘Г╪к╪з╪и╪й рвк┘В┘Е ┘Е╪╣ рвк┘Е╪▓ ╪и┘Д╪п┘Г. \n┘Е┘А╪л┘А╪з┘Д : `+96279654210`",
        filters=filters.text,
    )
    if await cancelled(api_id_msg):
        return
    phone_number = phone_number_msg.text
    await msg.reply("╪м┘А╪зрвк┘К ╪ервк╪│┘А╪з┘Д ╪з┘Д┘Г┘А┘И╪п ╪е┘Д┘А┘А┘Й ╪н┘А╪│╪з╪и┘А┘Г ╪з┘Ж╪к┘А╪╕рвк ┘В┘А┘Д┘К┘А┘Д┘Л╪з......")
    if telethon:
        client = TelegramClient(StringSession(), api_id, api_hash)
    else:
        client = Client(":memory:", api_id, api_hash)
    await client.connect()
    try:
        if telethon:
            code = await client.send_code_request(phone_number)
        else:
            code = await client.send_code(phone_number)
    except (ApiIdInvalid, ApiIdInvalidError):
        await msg.reply(
            "`API_ID` ┘И `API_HASH` ╪з▐м▌к╪з┘К╪и┘К╪з╪к ╪з▐м▌к╪о╪з╪╡╪й ╪и┘А┘Г ╪║┘К┘Арвк ╪╡┘А╪н┘А┘К╪н╪й ┘К┘Арвк╪м┘А┘Й ╪е╪╣┘А╪з╪п╪й ╪з▐м▌к╪з╪│╪к┘А╪о┘Арвк╪з╪м ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        await msg.reply(
            "`PHONE_NUMBER` рвк┘В┘Е ╪з▐м▌к┘З╪з╪к┘Б ╪з▐м▌к╪о╪з╪╡ ╪и┘А┘Г ╪║┘К┘Арвк ╪╡┘А╪н┘А┘К╪н ┘К┘Арвк╪м┘А┘Й ╪е╪╣┘А╪з╪п╪й ╪з▐м▌к╪з╪│╪к┘А╪о┘Арвк╪з╪м ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й ",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    try:
        phone_code_msg = await bot.ask(user_id, "[╪зрвк╪│┘Д ╪з▐м▌к┘Г┘А┘И╪п ┘Е╪л┘Д ╪з▐м▌к┘Д┘К ┘Б┘К ╪з▐м▌к╪╡┘Ирвк╪й ](https://telegra.ph/file/da1af082c6b754959ab47.jpg)┬╗  ЁЯФН┘Е┘Ж ┘Б╪╢┘Д┘Г ╪з┘Б╪н╪╡ ╪н╪│╪з╪и┘А┘Г ╪и╪з▐м▌к╪к┘Д┘К╪мрвк╪з┘Е ┘И╪к┘Б┘В╪п ╪з▐м▌к┘Г┘А┘И╪п ┘Е┘Ж ╪н╪│╪з╪и ╪е╪┤╪╣╪зрвк╪з╪к ╪з▐м▌к╪к┘Д┘К╪мрвк╪з┘Е. ╪е╪░╪з ┘Г╪з┘Ж\n  ┘З┘А┘Ж╪з┘Г ╪к╪н┘В┘В ╪и┘А╪о┘А╪╖┘И╪к┘К┘А┘Ж( ╪з▐м▌к┘Ервк┘Ирвк ) ╪М ╪грвк╪│┘А┘Д ┘Г┘Д┘Е╪й ╪з▐м▌к┘Ервк┘Ирвк ┘З┘А┘Ж╪з ╪и╪╣╪п ╪ервк╪│╪з▐м▌к ┘Г┘А┘И╪п ╪з▐м▌к╪п╪о┘И┘Д ╪и╪з▐м▌к╪к┘Ж╪│┘К┘В ╪г╪п┘Ж╪з┘З.- ╪е╪░╪з ┘Г╪з┘Ж╪к ┘Г┘Д┘Е╪й ╪з▐м▌к┘Ервк┘Ирвк ╪г┘И ╪з▐м▌к┘Г┘А┘И╪п  ┘З┘К\n 12345 ┘К┘Арвк╪м┘А┘Й ╪ервк╪│╪з▐м▌к┘З╪з ╪и╪з▐м▌к╪┤┘Г┘Д ╪з▐м▌к╪к╪з▐м▌к┘К 1 2 3 4 5 ┘Е╪╣ ┘И╪м┘И╪п ┘Е╪│┘А╪з┘Б┘А╪з╪к ╪и┘К┘Ж ╪з▐м▌к╪зрвк┘В╪з┘Е ╪е╪░╪з ╪з╪н╪к╪м╪к ┘Е╪│╪з╪╣╪п╪й @S_4_N.", filters=filters.text, timeout=600)
        if await cancelled(api_id_msg):
            return
    except TimeoutError:
        await msg.reply(
            "┘Д┘В╪п ╪к┘А╪м╪з┘И╪▓╪к ╪з▐м▌к╪н╪п ╪з▐м▌к╪▓┘Е┘Ж┘К 10 ╪п┘В╪з╪ж┘В ╪г╪╣┘А┘А╪п ╪з╪│╪к┘А╪о┘Арвк╪з╪м ╪з▐м▌к╪м┘А┘Д╪│╪й ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    phone_code = phone_code_msg.text.replace(" ", "")
    try:
        if telethon:
            await client.sign_in(phone_number, phone_code, password=None)
        else:
            await client.sign_in(phone_number, code.phone_code_hash, phone_code)
    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        await msg.reply(
            " рвк┘В┘Е ╪з▐м▌к┘З╪з╪к┘Б ╪з▐м▌к╪о╪з╪╡ ╪и┘А┘Г ╪║┘К┘Арвк ╪╡┘А╪н┘А┘К╪н ┘К┘Арвк╪м┘А┘Й ╪е╪╣┘А╪з╪п╪й ╪з▐м▌к╪з╪│╪к┘А╪о┘Арвк╪з╪м ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й ",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        await msg.reply(
            "╪з▐м▌к┘Г┘А┘И╪п ╪з▐м▌к┘А╪░┘К ╪г╪п╪о┘Д╪к┘З ╪о╪з╪╖╪ж ┘К┘Арвк╪м┘А┘Й ╪е╪╣┘А╪з╪п╪й ╪з▐м▌к╪е╪│╪к╪орвк╪з╪м ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        try:
            two_step_msg = await bot.ask(
                user_id,
                "╪з▐м▌к╪к┘А╪н┘А┘В┘В ╪и┘А╪о┘А╪╖┘И╪к┘К┘А┘Ж ┘Е┘А┘Б┘А╪╣┘Д ╪и┘А╪н┘А╪│╪з╪и┘А┘Г ┘Д┘А╪░╪з ┘В┘Е ╪и╪е╪п╪о┘А╪з┘Д┘З ┘З┘А┘Ж╪з ┘Д┘А╪╖┘А┘Б┘Л╪з.",
                filters=filters.text,
                timeout=300,
            )
        except TimeoutError:
            await msg.reply(
                "┘Д┘В╪п ╪к┘А╪м╪з┘И╪▓╪к ╪з▐м▌к┘Е╪п╪й ╪з▐м▌к╪▓┘Е┘Ж┘К╪й ┘К┘А╪м┘А╪и ╪╣┘А┘Д┘К┘Г ╪е╪╣┘А╪з╪п╪й ╪з╪│╪к┘А╪о┘Арвк╪з╪м ╪з▐м▌к╪м┘А┘Д╪│╪й ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й",
                reply_markup=InlineKeyboardMarkup(Data.generate_button),
            )
            return
        try:
            password = two_step_msg.text
            if telethon:
                await client.sign_in(password=password)
            else:
                await client.check_password(password=password)
            if await cancelled(api_id_msg):
                return
        except (PasswordHashInvalid, PasswordHashInvalidError):
            await two_step_msg.reply(
                "╪з▐м▌к╪к┘А╪н┘А┘В┘В ╪и┘А╪о┘А╪╖┘И╪к┘К┘А┘Ж ╪з▐м▌к┘А╪░┘К ╪г╪п╪о┘А┘Д┘А╪к┘З ╪о╪╖┘А┘А╪г ┘К┘Арвк╪м┘А┘Й ╪е╪╣┘А╪з╪п╪й ╪з▐м▌к╪з╪│╪к┘А╪о┘Арвк╪з╪м ┘Е┘Арвк╪й ╪г╪о┘Арвк┘Й ЁЯдН.",
                quote=True,
                reply_markup=InlineKeyboardMarkup(Data.generate_button),
            )
            return
    if telethon:
        string_session = client.session.save()
    else:
        string_session = await client.export_session_string()
    text = "**{} ┘Г┘А┘И╪п ╪з▐м▌к╪м┘А┘Д╪│╪й** \n\n`{}` \n\┘Е┘А╪│┘А╪к╪орвк╪м ┘Е┘Ж @Tepthon".format(
"╪к┘Д┘К╪л┘И┘Ж" if telethon else "╪и╪з┘Крвк┘И╪мрвк╪з┘Е", string_session
    )
    try:
        await client.send_message("me", text)
    except KeyError:
        pass
    await client.disconnect()
    await phone_code_msg.reply(
        "╪к┘А┘Е ╪з╪│╪к┘А╪о┘Арвк╪з╪м {} ╪з▐м▌к╪м┘А┘Д╪│╪й. \n\n┘К┘Арвк╪м┘А┘Й ╪к┘А┘Б┘А╪н╪╡ ╪з▐м▌крвк╪│╪з╪ж┘А┘Д ╪з▐м▌к┘Е╪н┘Б┘И╪╕┘А╪й! \n\n┘Е┘Ж @Tepthon".format(
            "telethon" if telethon else "pyrogram"
        )
    )


async def cancelled(msg):
    if "/cancel" in msg.text:
        await msg.reply(
            "╪к┘А┘Е ╪е┘Д┘А╪║╪з╪б ╪з╪│╪к┘А╪о┘Арвк╪з╪м ╪з▐м▌к╪м┘А┘Д╪│╪й!",
            quote=True,
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return True
    elif "/restart" in msg.text:
        await msg.reply(
            "╪к┘А┘Е ╪крвк╪│┘К╪к ╪з▐м▌к╪и┘И╪к!",
            quote=True,
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return True
    elif msg.text.startswith("/"):  # Bot Commands
        await msg.reply("╪к┘А┘Е ╪е┘Д╪║╪з╪д┘З!", quote=True)
        return True
    else:
        return False 
